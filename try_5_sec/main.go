package main

import (
	"encoding/json"
	"fmt"
	"log"
	"math"
	"net/http"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/gorilla/websocket"
	"gopkg.in/telebot.v3"
)

const (
	intervalDuration     = 5 * time.Second // —Ç–∞–π–º–∏–Ω–≥ —Å–≤–µ—á–∏
	minVolume            = 100.0           // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º
	priceChangeThreshold = 1.0             // –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è

	webSocketURL = "wss://api.gateio.ws/ws/v4/"
	botToken     = "7385636289:AAF54ZXLNkImvDB_x2IgvTSbXJx0OC2ymSU"
	apiURL       = "https://api.gateio.ws/api/v4/spot/currency_pairs"
)

var (
	registeredChatID int64
	candlestickData  = make(map[string][]Trade)
	mutex            sync.Mutex        // Mutex to synchronize access to candlestickData
	stopChan         = make(chan bool) // Channel to signal stopping
)

type Trade struct {
	ID           int    `json:"id"`
	CreateTime   int64  `json:"create_time"`
	CreateTimeMs string `json:"create_time_ms"`
	Side         string `json:"side"`
	CurrencyPair string `json:"currency_pair"`
	Amount       string `json:"amount"`
	Price        string `json:"price"`
	Range        string `json:"range"`
}

type WebSocketMessage struct {
	Time      int64           `json:"time"`
	TimeMs    int64           `json:"time_ms"`
	Channel   string          `json:"channel"`
	Event     string          `json:"event"`
	Result    json.RawMessage `json:"result"`
	Error     *ErrorMessage   `json:"error,omitempty"`
	RequestID string          `json:"requestId,omitempty"`
}

type ErrorMessage struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

type CurrencyPair struct {
	ID string `json:"id"`
}

func main() {
	pref := telebot.Settings{
		Token:  botToken,
		Poller: &telebot.LongPoller{Timeout: 10 * time.Second},
	}

	bot, err := telebot.NewBot(pref)
	if err != nil {
		log.Fatal(err)
		return
	}

	bot.Handle("/start", func(c telebot.Context) error {
		registeredChatID = c.Chat().ID
		go startWebSocketAndSendNotifications(bot) // –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
		return c.Send("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!")
	})

	bot.Handle("/stop", func(c telebot.Context) error {
		stopChan <- true // Send stop signal
		return c.Send("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
	})

	bot.Start()
}

func startWebSocketAndSendNotifications(bot *telebot.Bot) {
	pairs, err := getUSDTTradingPairs()
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä:", err)
	}

	conn, _, err := websocket.DefaultDialer.Dial(webSocketURL, nil)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket:", err)
	}
	defer conn.Close()

	for _, pair := range pairs {
		subscribeMessage := map[string]interface{}{
			"time":    int(time.Now().Unix()),
			"channel": "spot.trades",
			"event":   "subscribe",
			"payload": []string{pair},
		}

		err = conn.WriteJSON(subscribeMessage)
		if err != nil {
			log.Fatal("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:", err)
		}
	}

	ticker := time.NewTicker(intervalDuration)

	go func() {
		for {
			select {
			case <-stopChan:
				log.Println("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
				return
			default:
				_, message, err := conn.ReadMessage()
				if err != nil {
					log.Println("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
					continue
				}

				var wsMessage WebSocketMessage
				err = json.Unmarshal(message, &wsMessage)
				if err != nil {
					log.Println("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
					log.Printf("–°–æ–æ–±—â–µ–Ω–∏–µ: %s", message)
					continue
				}

				switch wsMessage.Event {
				case "subscribe":
					// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
					log.Printf("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ %s –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.", wsMessage.Channel)
					continue
				case "update":
					// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–¥–µ–ª–æ–∫
					var trade Trade
					err = json.Unmarshal(wsMessage.Result, &trade)
					if err != nil {
						log.Println("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–¥–µ–ª–∫–∏:", err)
						log.Printf("–°–æ–æ–±—â–µ–Ω–∏–µ: %s", message)
						continue
					}

					mutex.Lock()
					candlestickData[trade.CurrencyPair] = append(candlestickData[trade.CurrencyPair], trade)
					mutex.Unlock()
				default:
					// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
					continue
				}

				if wsMessage.Error != nil {
					log.Printf("–û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: %s", wsMessage.Error.Message)
				}
			}
		}
	}()

	for {
		select {
		case <-stopChan:
			log.Println("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–µ—á–µ–π.")
			return
		case <-ticker.C:
			mutex.Lock()
			for pair, trades := range candlestickData {
				if len(trades) == 0 {
					continue
				}

				openPrice, err1 := strconv.ParseFloat(trades[0].Price, 64)
				closePrice, err2 := strconv.ParseFloat(trades[len(trades)-1].Price, 64)
				if err1 != nil || err2 != nil {
					log.Println("–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã –æ—Ç–∫—Ä—ã—Ç–∏—è –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç–∏—è:", err1, err2)
					continue
				}

				highPrice := openPrice
				lowPrice := openPrice
				totalVolume := 0.0

				for _, trade := range trades {
					if trade.Price == "" || trade.Amount == "" {
						log.Println("–ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å–¥–µ–ª–∫–∞ —Å –ø—É—Å—Ç–æ–π —Ü–µ–Ω–æ–π –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º")
						continue
					}

					price, err1 := strconv.ParseFloat(trade.Price, 64)
					amount, err2 := strconv.ParseFloat(trade.Amount, 64)
					if err1 != nil || err2 != nil {
						log.Println("–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–æ:", err1, err2)
						continue
					}

					// –î–µ–Ω–µ–∂–Ω—ã–π –æ–±—ä—ë–º —Å–¥–µ–ª–∫–∏
					tradeVolume := amount * price
					totalVolume += tradeVolume

					if price > highPrice {
						highPrice = price
					}
					if price < lowPrice {
						lowPrice = price
					}
				}

				priceChangePercent := ((closePrice - openPrice) / openPrice) * 100

				if totalVolume > minVolume && math.Abs(priceChangePercent) > priceChangeThreshold {
					if registeredChatID != 0 {
						link := createTradingViewLink(pair)
						formattedVolume := formatVolume(totalVolume)
						formattedPriceChange := getPriceChangeWithSign(openPrice, closePrice)

						message := fmt.Sprintf(
							"%s\n%s\nüí∞ Vol: %s$\nüìà %s",
							formatPair(pair), formattedPriceChange, formattedVolume, link,
						)

						_, err := bot.Send(telebot.ChatID(registeredChatID), message)
						if err != nil {
							log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: %v", err)
						}
					}
				}

				candlestickData[pair] = nil
			}
			mutex.Unlock()
		}
	}
}

func createTradingViewLink(symbol string) string {
	symbol = strings.ReplaceAll(symbol, "_", "")
	baseURL := "https://ru.tradingview.com/symbols/"
	link := fmt.Sprintf("%s%s/?exchange=GATEIO", baseURL, symbol)
	link = strings.ReplaceAll(link, "1m", "")
	link = strings.ReplaceAll(link, "5s", "")
	return link
}

func getUSDTTradingPairs() ([]string, error) {
	resp, err := http.Get(apiURL)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: %v", err)
	}
	defer resp.Body.Close()

	var currencyPairs []CurrencyPair
	err = json.NewDecoder(resp.Body).Decode(&currencyPairs)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %v", err)
	}

	var usdtPairs []string
	for _, pair := range currencyPairs {
		if strings.HasSuffix(pair.ID, "_USDT") {
			usdtPairs = append(usdtPairs, pair.ID)
		}
	}

	return usdtPairs, nil
}

func formatPair(text string) string {
	text = strings.Replace(text, "_", "/", 1)
	return text
}

func formatVolume(volume float64) string {
	if volume > 1e9 {
		return fmt.Sprintf("%.3e", volume)
	}
	return fmt.Sprintf("%.2f", volume)
}

func getPriceChangeWithSign(openPrice, closePrice float64) string {
	priceChangePercent := ((closePrice - openPrice) / openPrice) * 100
	if priceChangePercent > 0 {
		return fmt.Sprintf("üü¢ +%.2f%%", priceChangePercent)
	}
	return fmt.Sprintf("üî¥ %.2f%%", priceChangePercent)
}
